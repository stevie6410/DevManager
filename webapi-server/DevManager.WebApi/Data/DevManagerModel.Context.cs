//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DevManager.WebApi.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DevManagerEntities : DbContext
    {
        public DevManagerEntities()
            : base("name=DevManagerEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
    		this.Configuration.ProxyCreationEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AffectedDepartment> AffectedDepartments { get; set; }
        public virtual DbSet<App> Apps { get; set; }
        public virtual DbSet<Attachment> Attachments { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Developer> Developers { get; set; }
        public virtual DbSet<DevelopmentRequestHour> DevelopmentRequestHours { get; set; }
        public virtual DbSet<DevelopmentRequestHoursTemplate> DevelopmentRequestHoursTemplates { get; set; }
        public virtual DbSet<DevelopmentRequest> DevelopmentRequests { get; set; }
        public virtual DbSet<DevelopmentType> DevelopmentTypes { get; set; }
        public virtual DbSet<DocType> DocTypes { get; set; }
        public virtual DbSet<Issue> Issues { get; set; }
        public virtual DbSet<IssueType> IssueTypes { get; set; }
        public virtual DbSet<LinkedSSRSReport> LinkedSSRSReports { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<ReportSpecDataSelection> ReportSpecDataSelections { get; set; }
        public virtual DbSet<ReportSpecEmailSubscriptionDelivery> ReportSpecEmailSubscriptionDeliveries { get; set; }
        public virtual DbSet<ReportSpecFilter> ReportSpecFilters { get; set; }
        public virtual DbSet<ReportSpecHeader> ReportSpecHeaders { get; set; }
        public virtual DbSet<ReportSpecParameter> ReportSpecParameters { get; set; }
        public virtual DbSet<ReportSpecSourceData> ReportSpecSourceDatas { get; set; }
        public virtual DbSet<RequestStatusSet> RequestStatusSets { get; set; }
        public virtual DbSet<RolePermission> RolePermissions { get; set; }
        public virtual DbSet<SoftwarePackage> SoftwarePackages { get; set; }
        public virtual DbSet<SystemDepartment> SystemDepartments { get; set; }
        public virtual DbSet<SAOSystem> SAOSystems { get; set; }
        public virtual DbSet<SSRSReport> SSRSReports { get; set; }
        public virtual DbSet<ReportDataDBObjectChange> ReportDataDBObjectChanges { get; set; }
        public virtual DbSet<DeployPackageDBObject> DeployPackageDBObjects { get; set; }
        public virtual DbSet<DeployPackage> DeployPackages { get; set; }
        public virtual DbSet<DeployPackageSSRSReport> DeployPackageSSRSReports { get; set; }
        public virtual DbSet<DeployEnvironment> DeployEnvironments { get; set; }
        public virtual DbSet<Deployment> Deployments { get; set; }
        public virtual DbSet<DeployPackageEvent> DeployPackageEvents { get; set; }
        public virtual DbSet<ReportDataDBObject> ReportDataDBObjects { get; set; }
    
        public virtual ObjectResult<ReportDataDBObject> SearchDbObjects(string searchTerm, Nullable<int> packageId)
        {
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("SearchTerm", searchTerm) :
                new ObjectParameter("SearchTerm", typeof(string));
    
            var packageIdParameter = packageId.HasValue ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportDataDBObject>("SearchDbObjects", searchTermParameter, packageIdParameter);
        }
    
        public virtual ObjectResult<ReportDataDBObject> SearchDbObjects(string searchTerm, Nullable<int> packageId, MergeOption mergeOption)
        {
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("SearchTerm", searchTerm) :
                new ObjectParameter("SearchTerm", typeof(string));
    
            var packageIdParameter = packageId.HasValue ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportDataDBObject>("SearchDbObjects", mergeOption, searchTermParameter, packageIdParameter);
        }
    }
}
